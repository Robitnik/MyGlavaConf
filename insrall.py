#!/usr/bin/env python3

#Reqire Glava!
import argparse, os, pwd, shutil, subprocess, sys, textwrap
from pathlib import Path

# ---------- helpers ----------
def env_for_user(user: str) -> dict:
    u = pwd.getpwnam(user)
    env = os.environ.copy()
    env["HOME"] = u.pw_dir
    env["USER"] = user
    for k in ["DISPLAY", "WAYLAND_DISPLAY", "XDG_RUNTIME_DIR", "DBUS_SESSION_BUS_ADDRESS"]:
        if k in os.environ: env[k] = os.environ[k]
    return env

def run(cmd, **kw): subprocess.run(cmd, check=True, **kw)

def write_rc(dst: Path, module: str, title: str, geom: tuple[int,int,int,int]):
    x,y,w,h = geom
    rc = textwrap.dedent(f"""
        /* GLava profile generated by setup_glava.py */
        #request mod {module}

        /* window basics */
        #request setfloating  false
        #request setdecorated false
        #request setfocused   false
        #request setmaximized false
        #request setopacity   "native"

        /* behave like desktop widget across all workspaces */
        #request setxwintype  "desktop"
        #request setclickthrough true

        #request settitle "{title}"
        /* fixed geometry (since this glava build has no --define) */
        #request setgeometry {x} {y} {w} {h}

        /* sensible defaults */
        #request setversion 3 3
        #request setshaderversion 330
        #request setbg 00000000
        #request setswap 1
        #request setinterpolate true
        #request setframerate 0
        #request setfullscreencheck false
        #request setprintframes false
        #request setsamplesize 1024
        #request setbufsize 4096
        #request setsamplerate 22050
        #request setforcegeometry false
        #request setforceraised false
        #request setbufscale 1
    """).strip()+"\n"
    (dst/"rc.glsl").write_text(rc, encoding="utf-8")

# ---------- main ----------
def main():
    # target user (place files in user profile even if run with sudo)
    if os.geteuid()==0 and os.environ.get("SUDO_USER"):
        target_user = os.environ["SUDO_USER"]
    else:
        target_user = pwd.getpwuid(os.geteuid()).pw_name
    env_user = env_for_user(target_user)

    HOME   = Path(env_user["HOME"])
    CONFIG = HOME/".config"
    GLAVA_BASE = CONFIG/"glava"
    CFG_BOTTOM = CONFIG/"glava-bottom"
    CFG_LEFT   = CONFIG/"glava-left"
    CFG_RIGHT  = CONFIG/"glava-right"
    AUTOSTART  = CONFIG/"autostart"/"glava-dual.desktop"

    # XDG “containers” (each instance sees its own profile via XDG_CONFIG_HOME)
    WRAP_ROOT   = HOME/".local/share/glava-launchers"
    CONT_BOTTOM = WRAP_ROOT/"bottom_cfg"
    CONT_LEFT   = WRAP_ROOT/"left_cfg"
    CONT_RIGHT  = WRAP_ROOT/"right_cfg"

    ap = argparse.ArgumentParser(description="GLava: bars 100% + two radial circles (left/right)")
    ap.add_argument("--width", type=int, default=3440)
    ap.add_argument("--height", type=int, default=1440)
    ap.add_argument("--bar-height", type=int, default=250)
    ap.add_argument("--left",  type=int, default=720, help="left circle diameter")
    ap.add_argument("--right", type=int, default=900, help="right circle diameter")
    ap.add_argument("--left-margin",  type=int, default=80)
    ap.add_argument("--right-margin", type=int, default=80)
    ap.add_argument("--gap-bottom",   type=int, default=40)
    ap.add_argument("--no-run", action="store_true")
    args = ap.parse_args()

    # 0) glava presence
    if shutil.which("glava") is None:
        print("❌ glava not found in PATH", file=sys.stderr); sys.exit(1)

    # 1) base config in user profile
    if not GLAVA_BASE.exists():
        print("→ Copying base glava config…")
        run(["glava","--copy-config"], env=env_user)

    print("[1/4] Preparing profiles…")
    for p in [CFG_BOTTOM, CFG_LEFT, CFG_RIGHT]:
        if p.exists(): shutil.rmtree(p)
        shutil.copytree(GLAVA_BASE, p)

    # optional soft style tweaks for circles (safe defines; ignored if unsupported)
    for dst, is_left in [(CFG_LEFT, True), (CFG_RIGHT, False)]:
        (dst/"shaders/common").mkdir(parents=True, exist_ok=True)
        (dst/"shaders/common/user.glsl").write_text(
            ("""
                #define RADIAL_THICKNESS 0.6
                #define RADIAL_SMOOTHING 0.4
                #define FG_ALPHA 1.0
                #define BG_ALPHA 0.0
            """ if is_left else """
                #define RADIAL_THICKNESS 1.2
                #define RADIAL_SMOOTHING 0.9
                #define FG_ALPHA 1.0
                #define BG_ALPHA 0.0
                #define FFT_SLOW_FALLOFF 1
            """).strip()+"\n", encoding="utf-8")

    print("[2/4] Computing geometry…")
    W,H = args.width, args.height
    bar_y = H - args.bar_height
    left_x = max(0, args.left_margin)
    left_y = max(0, min(H//2 - args.left//2, bar_y - args.gap_bottom - args.left))
    right_x = max(0, W - args.right - args.right_margin)
    right_y = max(0, min(H//2 - args.right//2, bar_y - args.gap_bottom - args.right))

    bars_geom  = (0, bar_y, W, args.bar_height)
    left_geom  = (left_x, left_y, args.left,  args.left)
    right_geom = (right_x, right_y, args.right, args.right)

    print("[3/4] Writing rc.glsl with fixed geometry…")
    write_rc(CFG_BOTTOM, "bars",   "GLava Bars (bottom)", bars_geom)
    write_rc(CFG_LEFT,   "radial", "GLava Radial (left)", left_geom)
    write_rc(CFG_RIGHT,  "radial", "GLava Radial (right)", right_geom)

    print("[4/4] Creating XDG containers + autostart…")
    for c in [CONT_BOTTOM, CONT_LEFT, CONT_RIGHT]:
        if c.exists(): shutil.rmtree(c)
        c.mkdir(parents=True, exist_ok=True)
    os.symlink(CFG_BOTTOM, CONT_BOTTOM/"glava", target_is_directory=True)
    os.symlink(CFG_LEFT,   CONT_LEFT/"glava",   target_is_directory=True)
    os.symlink(CFG_RIGHT,  CONT_RIGHT/"glava",  target_is_directory=True)

    AUTOSTART.parent.mkdir(parents=True, exist_ok=True)
    exec_cmd = (
        "sh -c '"
        "sleep 6; "
        f"XDG_CONFIG_HOME=\"{CONT_BOTTOM}\" glava --desktop & "
        "sleep 1; "
        f"XDG_CONFIG_HOME=\"{CONT_LEFT}\" glava --desktop & "
        "sleep 1; "
        f"XDG_CONFIG_HOME=\"{CONT_RIGHT}\" glava --desktop'"
    )
    AUTOSTART.write_text(textwrap.dedent(f"""\
        [Desktop Entry]
        Type=Application
        Name=GLava Dual+Bars
        Comment=Bottom bars 100% width + left/right radial circles (desktop layer)
        Exec={exec_cmd}
        X-GNOME-Autostart-enabled=true
        NoDisplay=false
        Hidden=false
    """), encoding="utf-8")

    print("✅ Done. Autostart:", AUTOSTART)
    print(" ~ Bottom bars:", bars_geom)
    print(" ~ Left circle:", left_geom)
    print(" ~ Right circle:", right_geom)

    # run now in user session
    try:
        run(["pkill","-u",target_user,"glava"])
    except subprocess.CalledProcessError:
        pass
    cmd = ["bash","-lc", exec_cmd]
    if os.geteuid()==0:
        run(["sudo","-u",target_user,"-E"] + cmd, env=env_for_user(target_user))
    else:
        run(cmd, env=env_user)

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print("❌", e, file=sys.stderr); sys.exit(1)
